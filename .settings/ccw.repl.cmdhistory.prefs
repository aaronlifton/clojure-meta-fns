cmdhistory=["1" "3" "(prn 1)" "(prn \\"1\\")" "(doseq [x [1 2 3]\\n        y [1 2 3]]\\n  (prn (* x y)))" "(doseq [x [1 2]\\n        y [1 2]]\\n  (prn (+ x y)))" "(doseq [[k v] {\:1 1 \:2 2 \:3 3}]\\n14\\n         (prn k v))" "(funs {\:wtf 7 \:factorial 4})\\n(doseq [[k v] *funs]\\n         (apply k v))" "IndexOutOfBoundsException" "(funs {\:wtf 7 \:factorial 4})" "(def funs {\:wtf 7 \:factorial 4})" "funs" "(doseq [[k v] funs] (apply k v))" "(doseq [[k v] *funs] (apply k v))" "(doseq [[k v] &funs]\\n         (apply k v))" "(def funs2 '{wtf 7 factorial 4})" "funs2" "(\=\=)" "(\=\= 1 1)" "(\=\= funs funs2)" "funs" "funs2" "(funs2 wtf)" "(funs wtf)" "(funs factorial)" "(get funs 1)" "get funs" "get funs factorial" "(get funs \:factorial)" "(def funs {\:wtf 7 \:factorial 4})" "funs" "(funs)" "funs 1" "funs \\"lol\\"" "(doseq [[k v] funs]\\n         (apply k v))" "(doseq [[k v] funs2]\\n         (apply k v))" "(doseq [[k v] funs]\\n         (prn k v))" "funs" "(def funs {\:wtf 7 \:factorial 4})\\n(doseq [[k v] funs]\\n  (if fn? (ns-resolve *ns* k) (apply k v)\\n    (prn (<< \\"error on key\: ~{k}\\"))))" "(doseq [[k v] funs]\\n  (if (fn? (ns-resolve *ns* k)) (apply k v)\\n    (prn (<< \\"error on key\: ~{k}\\"))))" "(def funs {\:wtf 7 \:factorial 4})\\n(doseq [[k v] funs]\\n  (if (fn? (ns-resolve *ns* k)) (apply k v)\\n    (prn \\"error\\")))" "(def funs {\:wtf 7 \:factorial 4})\\n(doseq [[k v] funs]\\n  (if (fn? (ns-resolve *ns* (symbol k))) (apply k v)\\n    (prn \\"error\\")))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] funs]\\n  (resolve (symbol k) v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] funs]\\n  ((resolve (symbol k)) v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] funs]\\n  ((symbol k) v))" "(doseq [[k v] funs]\\n  (@(resolve (symbol k)) v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (apply k v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (apply v k))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (apply (resolve (symbol k)) v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (apply (ns-resolve *ns* (symbol k) v)))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (k v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn k v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] funs]\\n  (prn k v))" "(def funs '{wtf 7 factorial 4})\\n(doseq [[k v] funs]\\n  (prn (apply k v)))" "(def funs '{wtf 7 factorial 4})" "(doseq [[k v] funs]\\n  (prn (apply k v)))" "(def funs '{wtf 7 factorial 4})" "(prn funs)" "(doseq [[k v] funs]\\n  (prn (apply k v)))" "(def funs '{wtf 7 factorial 4})" "funs2" "funs" "(\=\= funs, funs2)" "(eql funs, funs2)" "(.equals funs fun2)" "(\= funs funs2)" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply k v)))" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn k))" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply @k v)))" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply &k v)))" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply (resolve k) v)))" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply (resolve (symbol k)) v)))" "  (prn (apply ((resolve (symbol k)) v))))\\n" "(doseq [[k v] {\:wtf 7 \:factorial 4}]\\n  (prn (apply ((resolve (symbol k)) v))))" "{'wtf 7 'factorial 4}" "\\n(doseq [[k v] {'wtf 7 'factorial 4}]\\n  (prn (apply (resolve k) v)))" "(doseq [[k v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn (apply (resolve k) v)))" "\\n\\n(doseq [[k v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn (apply (resolve k) v)))" "\\n  (prn (apply (resolve (symbol k) v))))" "\\n(doseq [[k v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn (apply (resolve (symbol k) v))))" "\\n  (prn (apply ((resolve (symbol k) v))" "\\n(doseq [[k v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn (apply ((resolve (symbol k) v)))))" "\\n(doseq [[k v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn k v))" "(apply (resolve (symbol \\"wtf\\")) 2)\\n" "(apply (ns-resolve *ns* (symbol \\"wtf\\")) 2)" "(apply (resolve (symbol \\"wtf\\") 2))" "(map \#((resolve (symbol %))) [\\"wtf\\" \\"factorial\\"])" "(map \#((resolve (symbol %))) [\\"wtf\\" \\"factorial\\"])  \\n" "(map \#((resolve (symbol %))) [[\\"wtf\\" 1] \\"factorial\\"])" "(map \#((resolve (symbol %l))) {\\"wtf\\" 7 \\"factorial\\" 4})" "(map \#((resolve (symbol %k))) {\\"wtf\\" 7 \\"factorial\\" 4})" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [7 4])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [5 4])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [1 4])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [2 4])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [4 4])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [4 2])" "(map \#((resolve (symbol %1)) %2) [\\"wtf\\" \\"factorial\\"] [1 2])" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (map \#((resolve (symbol k)) v)))" "doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  \#((resolve (symbol k)) v))" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  ( \#((resolve (symbol k)) v)))" "\\n(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (((resolve (symbol k)) v)))" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  ( \#((resolve (symbol k)) v)))" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (\#((resolve (symbol k)) v)))" "\\n(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (\#((resolve (symbol %k)) %v)))" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (\#((resolve (symbol %1)) %2)))" "(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (\#((resolve (symbol k)) v)))" "\\n(doseq [[k,v] {\\"wtf\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "\\n(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])  \\n" "(ns myproject.core)\\n\\n(defn foo\\n  \\"I don't do a whole lot.\\"\\n  [x]\\n  (doseq [y [x \\"Hello, World\!\\"]] (prn y)))\\n\\n(defn loop-test\\n  [x]\\n  (loop [i x acc 1]\\n  (if (zero? i)\\n    acc\\n    (recur (dec i) (* acc i)))))\\n\\n(defn factorial \\n    ([n] \\n        (factorial n 1)) \\n    ([n acc] \\n        (if  (\= n 0)   acc \\n             (recur (dec n) (* acc n)))))\\n\\n(def funs2 {\:loop-test 7 \:factorial 4})\\n(def funs '{loop-test 7 factorial 4})\\n\\n;(doseq [[k v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n;  (prn k v))\\n\\n(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])  \\n\\n(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))\\n\\n;(apply (loop-test)\\n;(factorial 4)" "(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])" "(factorial 2)" "(factorial 10)" "(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(defn qsort [[pivot & xs]]\\n  (when pivot\\n    (let [smaller \#(< % pivot)]\\n      (lazy-cat (qsort (filter smaller xs))\\n\\t\\t[pivot]\\n\\t\\t(qsort (remove smaller xs))))))" "(qsort [2 1 5 6])" "(filter even? [1 2 3])" "(conj [1 2] [3 4])" "(conj [1 2] 3)" "(\= `(1 2) [1 2])" "{1 2 cat 3}" "{def x {1 2 \:cat 3}}" "(def x {1 2 \:cat 3})" "x" "(get x \:cat)" "(get x 1)" "(def funs2 {\:loop-test 7 \:factorial 4})" "(funs get \:loop-test)" "(funs get loop-test)" "(get funs loop-test)" "(get funs \:loop-test)" "(def funs '{loop-test 7 factorial 4})" "(get funs loop-test)" "(funs)" "funs" "(get funs factorial)" "(funs get factorial)" "(def funs '{loop-test 7 factorial 4})" "(get funs factorial)" "(get funs \:factorial)" "(get funs 'factorial)" "(def funs2 {\:loop-test 7 \:factorial 4})" "(get funs2 'loop-test)" "(get funs2 \:loop-test)" "(get funs 'factorial)" "(factorial 5)" "(factorial 2 1)" "(factorial 2 2)" "(def funs '{loop-test 7 factorial 4})" "(get funs 'loop-test)" "(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])" "(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])  \\n" "(defn loop-test\\n  [x]\\n  (loop [i x acc 1]\\n  (if (zero? i)\\n    acc\\n    (recur (dec i) (* acc i)))))\\n\\n(defn factorial \\n    ([n] \\n        (factorial n 1)) \\n    ([n acc] \\n        (if  (\= n 0)   acc \\n             (recur (dec n) (* acc n)))))\\n\\n(def funs2 {\:loop-test 7 \:factorial 4})\\n(def funs '{loop-test 7 factorial 4})\\n\\n;(doseq [[k v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n;  (prn k v))\\n\\n(map \#((resolve (symbol %1)) %2) [\\"loop-test\\" \\"factorial\\"] [1 2])  " "(defn loop-test\\n  [x]\\n  (loop [i x acc 1]\\n  (if (zero? i)\\n    acc\\n    (recur (dec i) (* acc i)))))" "(loop-test 2)" "(loop-test 10)" "(\= (loop-test 10) (factorial 10))" "(def funs '{loop-test 7 factorial 7})" "funs" "(funs)" "(funs 1)" "(get funs 1)" "(get funs %1)" "(funs %1)" "(funs get %1)" "(get funs `loop-test)" "(get funs 'loop-test)" "(doseq [[k,v] funs] (prn \#((resolve (symbol k)) v)))" "(doseq [[k,v] {\\"loop-test\\" 7 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "(doseq [[k,v] {\\"loop-test\\" 4 \\"factorial\\" 4}]\\n  (prn (\#((resolve (symbol k)) v))))" "\\n(defn fact [x]\\n  (loop [n x f 1]\\n    (if (\= n 1) f\\n      (recur (dec n) (* f n)))))" "(fact 5)" "(def facts (lazy-cat [1] (map * facts (iterate inc 2))))" "(def facts2 (reductions * (iterate inc 1)))" "(facts 5)" "(take 5 (facts))" "(take 4 facts)" "(take 50 facts)" "(take 10 facts)" "(take 10 facts2)" "(take 12 facts2)" "(set '(\:a \:a \:b \:c \:c \:c \:c \:d \:d))" "(str \\"Hello, \\" \\"Dave\\")" "(\#(str \\"Hello, \\" %) \\"dave\\")" "(\\"a\\" \\"b\\")" "(list \\"a\\" \\"b\\")" "(join  (list \\"a\\" \\"b\\"))" "(str  (list \\"a\\" \\"b\\"))" "(join \\"a\\" \\"b\\")" "(\\n clojure.string/join  \\"A\\" \\"B\\")" "(\\n  (with-out-str \\"HellO\\") \\"a\\")" "((constantly 1) 2)" "(fn [x] 1)" "((fn [x] 1) 2)" "((constantly 1) 2)" "(fn [x] x + 1)" "((fn [x] x + 1) 2)" "((fn [x] + x 1) 2)" "((fn [x] (+ x 1)) 2)" "(\#(+ 1 %) 2)" "(defmacro assert-equals [actual expected] \\n            (\= expected actual))\\n\\n(prn (assert-equals 1 1))" "\:(assert-equals 1 1)" "(defmacro assert-equals [actual expected] \\n            (\= expected actual))\\n\\n(prn (assert-equals 1 1))" "(defmacro assert-equals [actual expected] \\n    `(when-not (\= ~actual ~expected) \\n        (throw \\n            (AssertionError.\\n                (str \\"Expected \\" ~expected \\" but was \\" ~actual)))))" "(assert-equals 1 1)" "(macroexpand-1 '(assert-equals (inc 5) 6))\\n(when-not \\n    (\= (inc 5) 6) \\n        (throw \\n            (java.lang.AssertionError.\\n                (str \\"Expected \\" 6 \\" but was \\" (inc 5)))))" "(macroexpand-1 '(assert-equals (inc 5) 5))\\n(when-not \\n    (\= (inc 5) 5) \\n        (throw \\n            (java.lang.AssertionError. \\n                (str \\"Expected '\\" (quote (inc 5)) \\"' to be \\" 5 \\" but was \\" (inc 5)))))" "(defmacro assert-equals [actual expected] \\n    `(let [actual-value\# ~actual] \\n        (when-not (\= actual-value\# ~expected) \\n            (throw \\n                (AssertionError. \\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected\\n                       \\" but was \\" actual-value\#))))))\\n\\n(prn (assert-equals 1 1))" " (assert-equals 1 1)" "(macroexpand-1 '(assert-equals (answer question) 42))" "(defmacro assert-equals [actual expected] \\n    `(let [~'actual-value ~actual] \\n        (when-not (\= ~'actual-value ~expected) \\n            (throw \\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))))" "(assert-equals 1 1)" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(macroexpand-1 '5 5)" "(defmacro assert-equals [actual expected] (list '\= expected actual))" "(assert-equals 1 2)" "(macroexpand '(assert-equals (inc 5) 6))" "(macroexpand-1 '(assert-equals (inc 5) 6))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))))\\n\\n(prn (assert-equals 1 1))" "(assert-equals (inc 5) 6)" "(assert-equals (inc 5) 5)" "(macroexpand-1 (assert-equals (inc 5) 5))" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))))\\n            (str \\"True\\")" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))))\\n        (str \\"True\\")" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(assert-equals (inc 5) 5)" "(assert-equals (inc 5) 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (when (\= ~'actual-value ~expected)\\n          (str \\"True\\")))" " (macroexpand-1 '(assert-equals (inc 5) 5))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\\")))" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (when (\= ~actual-value ~expected)\\n            (str \\"True\\")))\\n(macroexpand-1 '(assert-equals (inc 5) 5))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (when (\= '~actual-value '~expected)\\n            (str \\"True\\")))\\n(macroexpand-1 '(assert-equals (inc 5) 5))" "(assert-equals 5 5)" " (assert-equals 5 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (else (str \\"True\\")))" "\\n(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value)))))\\n        (\:else (str \\"True\\")))" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (cond (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\\"))))" "(macroexpand-1 '(assert-equals (inc 5) 5))" "(assert-equals 5 5)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' equals '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))" "(assert-equals (inc 5) 5))" "(assert-equals (inc 5) 5)" "(assert-equals (inc 5) 6))" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual-value \\"' equals '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)" "\\n(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual-value \\"' equals '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" ~'actual-value \\"' equals '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" ~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)" "\\n(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" ~'actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(defn test-assert-equals\\n\\t(macroexpand-1 '(assert-equals (inc 5) 5))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(def test-assert-equals\\n\\t(macroexpand-1 '(assert-equals (inc 5) 5))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "(defn test-assert-equals\\n\\t(macroexpand-1 '(assert-equals (inc 5) 5))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "(defn test-assert-equals\\n\\t(macroexpand-1 ~'(assert-equals (inc 5) 5))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(defn test-assert-equals\\n  (let [mcro (assert-equals (inc 5) 5)]\\n    (macroexpand-1 'mcro))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(defn test-assert-equals\\n  (let [mcro '(assert-equals (inc 5) 5)]\\n    (macroexpand-1 mcro))\\n\\t(assert-equals (inc 5) 5)\\n\\t(assert-equals (inc 5) 6)\\n )" "\\n(defmacro assert-equals [actual expected]\\n    `(let [~'actual-value ~actual]\\n        (when-not (\= ~'actual-value ~expected)\\n            (throw\\n                (AssertionError.\\n                   (str \\"Expected '\\" '~actual \\"' to be \\" ~expected \\" but was \\" ~'actual-value))))\\n        (when (\= ~'actual-value ~expected)\\n            (str \\"True\: '\\" '~actual \\"' \=> '\\" ~'actual-value \\"' \= '\\" ~expected \\"'\\"))))\\n\\n(macroexpand-1 '(assert-equals (inc 5) 5))\\n(assert-equals (inc 5) 5)\\n(assert-equals (inc 5) 6)"]
eclipse.preferences.version=1
